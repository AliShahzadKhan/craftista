name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with: 
          node-version: '20'

      - name: Install dependencies (frontend)
        run: |
          cd frontend
          npm install
          npm test

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
               
      - name: Set up Python
        uses: actions/setup-python@v5
        with: 
          python-version: '3.11'

      - name: Install dependencies (catalogue)
        run: |
          cd catalogue
          pip install -r requirements.txt
          pytest
      
      - uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run Maven tests (voting)
        run: |
          cd voting
          mvn test
       
      - uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Run Go tests (recommendation)
        run: |
          cd recommendation
          go test ./...    
      

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
     
      - name: Build and Push all Images
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME}}/frontend:latest ./frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend:latest

          docker build -t ${{ secrets.DOCKER_USERNAME}}/catalogue:latest ./catalogue
          docker push ${{ secrets.DOCKER_USERNAME }}/catalogue:latest

          docker build -t ${{ secrets.DOCKER_USERNAME }}/voting:latest ./voting
          docker push ${{ secrets.DOCKER_USERNAME }}/voting:latest

          docker build -t ${{ secrets.DOCKER_USERNAME }}/recommendation:latest ./recommendation
          docker push ${{ secrets.DOCKER_USERNAME }}/recommendation
      
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |

            if ! command -v docker-compose &> /dev/null
            then
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.27.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            fi

            docker compose -f docker-compose.prod.yml down
            docker system prune -af

            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d
